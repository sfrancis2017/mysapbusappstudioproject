"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguredProvider = getConfiguredProvider;
exports.getAbapTarget = getAbapTarget;
const btp_utils_1 = require("@sap-ux/btp-utils");
const system_access_1 = require("@sap-ux/system-access");
const target_systems_1 = require("./target-systems");
/**
 * Retrieves a fully configured ABAP service provider for the specified system.
 *
 * This function uses the provided system identifier (and optional client and credentials)
 * to build an ABAP target configuration, which is then passed to createAbapServiceProvider.
 *
 * @param {ProviderOptions} options - Options for configuring the provider.
 * @param {ToolsLogger} logger - The logger for logging errors and debug messages.
 * @returns {Promise<AbapServiceProvider>} A promise that resolves to the configured ABAP service provider.
 * @throws {Error} If provider instantiation fails.
 */
async function getConfiguredProvider({ system, client, password, username }, logger) {
    try {
        const requestOptions = {
            ignoreCertErrors: false
        };
        const target = await getAbapTarget(system, logger, requestOptions, client);
        if (username && password) {
            requestOptions.auth = { username, password };
        }
        return await (0, system_access_1.createAbapServiceProvider)(target, requestOptions, false, logger);
    }
    catch (e) {
        logger?.error(`Failed to instantiate provider for system: ${system}. Reason: ${e.message}`);
        throw new Error(e.message);
    }
}
/**
 * Determines the ABAP target configuration based on the running environment and system details.
 *
 * For an App Studio environment, the target is constructed with a destination property.
 * For non-AppStudio environments, the function retrieves system details from the TargetSystems service,
 * maps these details to an AbapTarget, and attaches authentication credentials to the request options if available.
 *
 * @param {string} system - The system identifier (URL or system name).
 * @param {ToolsLogger} logger - The logger for logging errors.
 * @param {RequestOptions} [requestOptions] - Optional request options which will be updated with auth information if available.
 * @param {string} [client] - Optional client number for systems with multiple clients.
 * @returns {Promise<AbapTarget>} A promise that resolves to the configured ABAP target.
 */
async function getAbapTarget(system, logger, requestOptions, client) {
    let target;
    const targetSystems = new target_systems_1.TargetSystems(logger);
    if ((0, btp_utils_1.isAppStudio)()) {
        target = {
            destination: system
        };
    }
    else {
        const details = await targetSystems.getSystemByName(system);
        if (!details) {
            throw new Error(`No system details found for system: ${system}`);
        }
        target = {
            client: details?.Client ?? client,
            url: details?.Url
        };
        if (details?.Authentication) {
            target.authenticationType = details?.Authentication;
        }
        const username = details?.Credentials?.username;
        const password = details?.Credentials?.password;
        if (requestOptions && username && password) {
            requestOptions.auth = {
                username,
                password
            };
        }
    }
    return target;
}
//# sourceMappingURL=abap-provider.js.map